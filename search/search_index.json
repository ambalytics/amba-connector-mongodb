{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"amba-connector-mongodb MongDB Sink for amba-analysis-streams sink.start(topic, collection) start sink for a given topic, into a given collection use dict for topics, collections create a process for all them events, linked","title":"Home"},{"location":"#amba-connector-mongodb","text":"MongDB Sink for amba-analysis-streams sink.start(topic, collection) start sink for a given topic, into a given collection use dict for topics, collections create a process for all them events, linked","title":"amba-connector-mongodb"},{"location":"mongodb_connector_ref/","text":"Supervisor supervisor class __init__ ( self ) special init Source code in src/mongo_supervisor.py def __init__ ( self ): \"\"\"init\"\"\" self . running = True signal . signal ( signal . SIGINT , self . stop ) signal . signal ( signal . SIGTERM , self . stop ) # need self . workers = list () self . tw = list () main ( self ) setup logging Source code in src/mongo_supervisor.py def main ( self ): \"\"\"setup logging \"\"\" format = \" %(asctime)s : %(message)s \" logging . basicConfig ( format = format , level = logging . INFO , datefmt = \"%H:%M:%S\" ) stop ( self , signum , els ) stop Source code in src/mongo_supervisor.py def stop ( self , signum , els ): \"\"\"stop\"\"\" logging . warning ( \"Supervisor stop\" ) self . stop_workers () self . running = False stop_workers ( self ) stop worker Source code in src/mongo_supervisor.py def stop_workers ( self ): \"\"\"stop worker\"\"\" logging . warning ( \"Supervisor : close threads.\" ) for tw in self . tw : tw . stop () for work in self . workers : work . close ()","title":"Mongodb connector ref"},{"location":"mongodb_connector_ref/#mongo_supervisor.Supervisor","text":"supervisor class","title":"Supervisor"},{"location":"mongodb_connector_ref/#mongo_supervisor.Supervisor.__init__","text":"init Source code in src/mongo_supervisor.py def __init__ ( self ): \"\"\"init\"\"\" self . running = True signal . signal ( signal . SIGINT , self . stop ) signal . signal ( signal . SIGTERM , self . stop ) # need self . workers = list () self . tw = list ()","title":"__init__()"},{"location":"mongodb_connector_ref/#mongo_supervisor.Supervisor.main","text":"setup logging Source code in src/mongo_supervisor.py def main ( self ): \"\"\"setup logging \"\"\" format = \" %(asctime)s : %(message)s \" logging . basicConfig ( format = format , level = logging . INFO , datefmt = \"%H:%M:%S\" )","title":"main()"},{"location":"mongodb_connector_ref/#mongo_supervisor.Supervisor.stop","text":"stop Source code in src/mongo_supervisor.py def stop ( self , signum , els ): \"\"\"stop\"\"\" logging . warning ( \"Supervisor stop\" ) self . stop_workers () self . running = False","title":"stop()"},{"location":"mongodb_connector_ref/#mongo_supervisor.Supervisor.stop_workers","text":"stop worker Source code in src/mongo_supervisor.py def stop_workers ( self ): \"\"\"stop worker\"\"\" logging . warning ( \"Supervisor : close threads.\" ) for tw in self . tw : tw . stop () for work in self . workers : work . close ()","title":"stop_workers()"},{"location":"monogo_supervisor_ref/","text":"MongoDBConnector save events from kafka into a mongo db __init__ ( self , id ) special init Parameters: Name Type Description Default id the id required Source code in src/mongodb_connector.py def __init__ ( self , id ): \"\"\"init Arguments: id: the id \"\"\" super () . __init__ ( id ) # todo client for each thread self . mongo_client = pymongo . MongoClient ( host = self . config [ 'mongo_url' ], serverSelectionTimeoutMS = 3000 , # 3 second timeout username = \"root\" , password = \"example\" ) self . db = self . mongo_client [ self . config [ 'mongo_client' ]] self . collection = self . db [ self . config [ 'mongo_collection' ]] on_message ( self , json_msg ) save the json_msg in mongo Parameters: Name Type Description Default json_msg the event json to save required Source code in src/mongodb_connector.py def on_message ( self , json_msg ): \"\"\"save the json_msg in mongo Arguments: json_msg: the event json to save \"\"\" logging . warning ( self . log + \"insert %s in collection %s \" % ( json_msg [ 'id' ], json_msg [ 'state' ])) # logging.warning(json_msg) # todo use id from event json_msg [ '_id' ] = json_msg [ 'id' ] try : # self.collection.insert_one(json_msg) self . db [ json_msg [ 'state' ]] . insert_one ( json_msg ) except pymongo . errors . DuplicateKeyError : logging . warning ( \"MongoDB collection/state %s , Duplicate found, continue\" % json_msg [ 'state' ]) set_state ( self , state ) set status Parameters: Name Type Description Default state state to set required Source code in src/mongodb_connector.py def set_state ( self , state ): \"\"\"set status Arguments: state: state to set \"\"\" self . state = [ state ] self . group_id = \"mongo_db_connector_lpd-\" + state","title":"Monogo supervisor ref"},{"location":"monogo_supervisor_ref/#mongodb_connector.MongoDBConnector","text":"save events from kafka into a mongo db","title":"MongoDBConnector"},{"location":"monogo_supervisor_ref/#mongodb_connector.MongoDBConnector.__init__","text":"init Parameters: Name Type Description Default id the id required Source code in src/mongodb_connector.py def __init__ ( self , id ): \"\"\"init Arguments: id: the id \"\"\" super () . __init__ ( id ) # todo client for each thread self . mongo_client = pymongo . MongoClient ( host = self . config [ 'mongo_url' ], serverSelectionTimeoutMS = 3000 , # 3 second timeout username = \"root\" , password = \"example\" ) self . db = self . mongo_client [ self . config [ 'mongo_client' ]] self . collection = self . db [ self . config [ 'mongo_collection' ]]","title":"__init__()"},{"location":"monogo_supervisor_ref/#mongodb_connector.MongoDBConnector.on_message","text":"save the json_msg in mongo Parameters: Name Type Description Default json_msg the event json to save required Source code in src/mongodb_connector.py def on_message ( self , json_msg ): \"\"\"save the json_msg in mongo Arguments: json_msg: the event json to save \"\"\" logging . warning ( self . log + \"insert %s in collection %s \" % ( json_msg [ 'id' ], json_msg [ 'state' ])) # logging.warning(json_msg) # todo use id from event json_msg [ '_id' ] = json_msg [ 'id' ] try : # self.collection.insert_one(json_msg) self . db [ json_msg [ 'state' ]] . insert_one ( json_msg ) except pymongo . errors . DuplicateKeyError : logging . warning ( \"MongoDB collection/state %s , Duplicate found, continue\" % json_msg [ 'state' ])","title":"on_message()"},{"location":"monogo_supervisor_ref/#mongodb_connector.MongoDBConnector.set_state","text":"set status Parameters: Name Type Description Default state state to set required Source code in src/mongodb_connector.py def set_state ( self , state ): \"\"\"set status Arguments: state: state to set \"\"\" self . state = [ state ] self . group_id = \"mongo_db_connector_lpd-\" + state","title":"set_state()"}]}